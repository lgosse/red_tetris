// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Forms Chat Chat should render as expected with messages 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Chat
    messages={
      Array [
        Object {
          "senderId": "unikID1",
          "senderName": "awesomeNickname",
          "text": "yolooooo",
        },
        Object {
          "senderId": "unikID2",
          "senderName": "awesomeNicknameeee",
          "text": "yalaaaaa",
        },
      ]
    }
    player={
      Object {
        "nickname": "awesomeNickname",
        "socketId": "unikID1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Messages
          messages={
            Array [
              Object {
                "senderId": "unikID1",
                "senderName": "awesomeNickname",
                "text": "yolooooo",
              },
              Object {
                "senderId": "unikID2",
                "senderName": "awesomeNicknameeee",
                "text": "yalaaaaa",
              },
            ]
          }
          player={
            Object {
              "nickname": "awesomeNickname",
              "socketId": "unikID1",
            }
          }
        />,
        <styled.form
          onSubmit={undefined}
        >
          <styled.input
            id="message"
            name="message"
            placeholder="Send message"
          />
          <styled.button>
            SEND
          </styled.button>
        </styled.form>,
      ],
      "direction": "column",
      "style": Object {
        "flex": 1,
        "margin": "8px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "messages": Array [
            Object {
              "senderId": "unikID1",
              "senderName": "awesomeNickname",
              "text": "yolooooo",
            },
            Object {
              "senderId": "unikID2",
              "senderName": "awesomeNicknameeee",
              "text": "yalaaaaa",
            },
          ],
          "player": Object {
            "nickname": "awesomeNickname",
            "socketId": "unikID1",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.input
              id="message"
              name="message"
              placeholder="Send message"
            />,
            <styled.button>
              SEND
            </styled.button>,
          ],
          "onSubmit": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "message",
              "name": "message",
              "placeholder": "Send message",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "SEND",
            },
            "ref": null,
            "rendered": "SEND",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Messages
            messages={
              Array [
                Object {
                  "senderId": "unikID1",
                  "senderName": "awesomeNickname",
                  "text": "yolooooo",
                },
                Object {
                  "senderId": "unikID2",
                  "senderName": "awesomeNicknameeee",
                  "text": "yalaaaaa",
                },
              ]
            }
            player={
              Object {
                "nickname": "awesomeNickname",
                "socketId": "unikID1",
              }
            }
          />,
          <styled.form
            onSubmit={undefined}
          >
            <styled.input
              id="message"
              name="message"
              placeholder="Send message"
            />
            <styled.button>
              SEND
            </styled.button>
          </styled.form>,
        ],
        "direction": "column",
        "style": Object {
          "flex": 1,
          "margin": "8px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "messages": Array [
              Object {
                "senderId": "unikID1",
                "senderName": "awesomeNickname",
                "text": "yolooooo",
              },
              Object {
                "senderId": "unikID2",
                "senderName": "awesomeNicknameeee",
                "text": "yalaaaaa",
              },
            ],
            "player": Object {
              "nickname": "awesomeNickname",
              "socketId": "unikID1",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.input
                id="message"
                name="message"
                placeholder="Send message"
              />,
              <styled.button>
                SEND
              </styled.button>,
            ],
            "onSubmit": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "message",
                "name": "message",
                "placeholder": "Send message",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "SEND",
              },
              "ref": null,
              "rendered": "SEND",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Forms Chat Chat should render as expected without messages 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Chat
    messages={null}
    player={
      Object {
        "nickname": "awesomeNickname",
        "socketId": "unikID1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <div
          style={
            Object {
              "flex": 1,
            }
          }
        />,
        <styled.form
          onSubmit={undefined}
        >
          <styled.input
            id="message"
            name="message"
            placeholder="Send message"
          />
          <styled.button>
            SEND
          </styled.button>
        </styled.form>,
      ],
      "direction": "column",
      "style": Object {
        "flex": 1,
        "margin": "8px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "flex": 1,
          },
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.input
              id="message"
              name="message"
              placeholder="Send message"
            />,
            <styled.button>
              SEND
            </styled.button>,
          ],
          "onSubmit": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "message",
              "name": "message",
              "placeholder": "Send message",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "SEND",
            },
            "ref": null,
            "rendered": "SEND",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <div
            style={
              Object {
                "flex": 1,
              }
            }
          />,
          <styled.form
            onSubmit={undefined}
          >
            <styled.input
              id="message"
              name="message"
              placeholder="Send message"
            />
            <styled.button>
              SEND
            </styled.button>
          </styled.form>,
        ],
        "direction": "column",
        "style": Object {
          "flex": 1,
          "margin": "8px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "flex": 1,
            },
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.input
                id="message"
                name="message"
                placeholder="Send message"
              />,
              <styled.button>
                SEND
              </styled.button>,
            ],
            "onSubmit": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "message",
                "name": "message",
                "placeholder": "Send message",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "SEND",
              },
              "ref": null,
              "rendered": "SEND",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Forms Chat Messages should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Messages
    messages={
      Array [
        Object {
          "senderId": "unikID1",
          "senderName": "awesomeNickname",
          "text": "yolooooo",
        },
        Object {
          "senderId": "unikID2",
          "senderName": "awesomeNicknameeee",
          "text": "yalaaaaa",
        },
      ]
    }
    player={
      Object {
        "nickname": "awesomeNickname",
        "socketId": "unikID1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div>
          <styled.div />
          <div
            style={
              Object {
                "marginTop": "10px",
              }
            }
          >
            <styled.div
              right={true}
            >
              me
            </styled.div>
            <styled.div>
              yolooooo
            </styled.div>
          </div>
        </styled.div>,
        <styled.div>
          <div
            style={
              Object {
                "marginTop": "10px",
              }
            }
          >
            <styled.div>
              awesomeNicknameeee
            </styled.div>
            <styled.div>
              yalaaaaa
            </styled.div>
          </div>
          <styled.div />
        </styled.div>,
      ],
      "id": "messages-container",
    },
    "ref": [Function],
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div />,
            <div
              style={
                Object {
                  "marginTop": "10px",
                }
              }
            >
              <styled.div
                right={true}
              >
                me
              </styled.div>
              <styled.div>
                yolooooo
              </styled.div>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <styled.div
                  right={true}
                >
                  me
                </styled.div>,
                <styled.div>
                  yolooooo
                </styled.div>,
              ],
              "style": Object {
                "marginTop": "10px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "me",
                  "right": true,
                },
                "ref": null,
                "rendered": "me",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "yolooooo",
                },
                "ref": null,
                "rendered": "yolooooo",
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <div
              style={
                Object {
                  "marginTop": "10px",
                }
              }
            >
              <styled.div>
                awesomeNicknameeee
              </styled.div>
              <styled.div>
                yalaaaaa
              </styled.div>
            </div>,
            <styled.div />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <styled.div>
                  awesomeNicknameeee
                </styled.div>,
                <styled.div>
                  yalaaaaa
                </styled.div>,
              ],
              "style": Object {
                "marginTop": "10px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "awesomeNicknameeee",
                },
                "ref": null,
                "rendered": "awesomeNicknameeee",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "yalaaaaa",
                },
                "ref": null,
                "rendered": "yalaaaaa",
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div>
            <styled.div />
            <div
              style={
                Object {
                  "marginTop": "10px",
                }
              }
            >
              <styled.div
                right={true}
              >
                me
              </styled.div>
              <styled.div>
                yolooooo
              </styled.div>
            </div>
          </styled.div>,
          <styled.div>
            <div
              style={
                Object {
                  "marginTop": "10px",
                }
              }
            >
              <styled.div>
                awesomeNicknameeee
              </styled.div>
              <styled.div>
                yalaaaaa
              </styled.div>
            </div>
            <styled.div />
          </styled.div>,
        ],
        "id": "messages-container",
      },
      "ref": [Function],
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div />,
              <div
                style={
                  Object {
                    "marginTop": "10px",
                  }
                }
              >
                <styled.div
                  right={true}
                >
                  me
                </styled.div>
                <styled.div>
                  yolooooo
                </styled.div>
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <styled.div
                    right={true}
                  >
                    me
                  </styled.div>,
                  <styled.div>
                    yolooooo
                  </styled.div>,
                ],
                "style": Object {
                  "marginTop": "10px",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "me",
                    "right": true,
                  },
                  "ref": null,
                  "rendered": "me",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "yolooooo",
                  },
                  "ref": null,
                  "rendered": "yolooooo",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <div
                style={
                  Object {
                    "marginTop": "10px",
                  }
                }
              >
                <styled.div>
                  awesomeNicknameeee
                </styled.div>
                <styled.div>
                  yalaaaaa
                </styled.div>
              </div>,
              <styled.div />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <styled.div>
                    awesomeNicknameeee
                  </styled.div>,
                  <styled.div>
                    yalaaaaa
                  </styled.div>,
                ],
                "style": Object {
                  "marginTop": "10px",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "awesomeNicknameeee",
                  },
                  "ref": null,
                  "rendered": "awesomeNicknameeee",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "yalaaaaa",
                  },
                  "ref": null,
                  "rendered": "yalaaaaa",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Forms PartyForm PartyForm should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PartyForm
    player={
      Object {
        "nickname": "toto",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div
          center={true}
          color="accent"
          gameFont={true}
          padding="20px"
          size="20px"
        >
          Create a new Game
        </styled.div>,
        <styled.div
          flex={true}
        >
          <styled.div />
          <form
            onSubmit={[Function]}
          >
            <styled.div>
              <styled.input
                id="partyNameInput"
                maxLength="20"
                name="partyName"
                placeholder="Room name..."
                required={true}
              />
            </styled.div>
            <styled.div
              direction="column"
            >
              <label
                htmlFor="partySizeInput"
                style={
                  Object {
                    "color": "#f4f5f3",
                    "paddingTop": "12px",
                  }
                }
              >
                Number of players
              </label>
              <styled.input
                defaultValue={5}
                id="partySizeInput"
                max={10}
                min={1}
                name="partySize"
                placeholder="10"
                type="number"
              />
            </styled.div>
            <styled.div
              padding="16px"
            >
              <input
                id="partyWithBonusInput"
                name="withBonus"
                type="checkbox"
              />
              <label
                htmlFor="partyWithBonusInput"
                style={
                  Object {
                    "color": "#f4f5f3",
                    "paddingLeft": "12px",
                  }
                }
              >
                EXPLOSION MODE
              </label>
            </styled.div>
            <styled.div>
              <styled.button
                id="submitButton"
                primary={true}
                style={
                  Object {
                    "marginLeft": "20px",
                  }
                }
                type="submit"
              >
                CREATE GAME
              </styled.button>
            </styled.div>
          </form>
          <styled.div />
        </styled.div>,
      ],
      "padding": "20px",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "center": true,
          "children": "Create a new Game",
          "color": "accent",
          "gameFont": true,
          "padding": "20px",
          "size": "20px",
        },
        "ref": null,
        "rendered": "Create a new Game",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div />,
            <form
              onSubmit={[Function]}
            >
              <styled.div>
                <styled.input
                  id="partyNameInput"
                  maxLength="20"
                  name="partyName"
                  placeholder="Room name..."
                  required={true}
                />
              </styled.div>
              <styled.div
                direction="column"
              >
                <label
                  htmlFor="partySizeInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingTop": "12px",
                    }
                  }
                >
                  Number of players
                </label>
                <styled.input
                  defaultValue={5}
                  id="partySizeInput"
                  max={10}
                  min={1}
                  name="partySize"
                  placeholder="10"
                  type="number"
                />
              </styled.div>
              <styled.div
                padding="16px"
              >
                <input
                  id="partyWithBonusInput"
                  name="withBonus"
                  type="checkbox"
                />
                <label
                  htmlFor="partyWithBonusInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingLeft": "12px",
                    }
                  }
                >
                  EXPLOSION MODE
                </label>
              </styled.div>
              <styled.div>
                <styled.button
                  id="submitButton"
                  primary={true}
                  style={
                    Object {
                      "marginLeft": "20px",
                    }
                  }
                  type="submit"
                >
                  CREATE GAME
                </styled.button>
              </styled.div>
            </form>,
            <styled.div />,
          ],
          "flex": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <styled.div>
                  <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />
                </styled.div>,
                <styled.div
                  direction="column"
                >
                  <label
                    htmlFor="partySizeInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      }
                    }
                  >
                    Number of players
                  </label>
                  <styled.input
                    defaultValue={5}
                    id="partySizeInput"
                    max={10}
                    min={1}
                    name="partySize"
                    placeholder="10"
                    type="number"
                  />
                </styled.div>,
                <styled.div
                  padding="16px"
                >
                  <input
                    id="partyWithBonusInput"
                    name="withBonus"
                    type="checkbox"
                  />
                  <label
                    htmlFor="partyWithBonusInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      }
                    }
                  >
                    EXPLOSION MODE
                  </label>
                </styled.div>,
                <styled.div>
                  <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>
                </styled.div>,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "id": "partyNameInput",
                    "maxLength": "20",
                    "name": "partyName",
                    "placeholder": "Room name...",
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <label
                      htmlFor="partySizeInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        }
                      }
                    >
                      Number of players
                    </label>,
                    <styled.input
                      defaultValue={5}
                      id="partySizeInput"
                      max={10}
                      min={1}
                      name="partySize"
                      placeholder="10"
                      type="number"
                    />,
                  ],
                  "direction": "column",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Number of players",
                      "htmlFor": "partySizeInput",
                      "style": Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      },
                    },
                    "ref": null,
                    "rendered": "Number of players",
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultValue": 5,
                      "id": "partySizeInput",
                      "max": 10,
                      "min": 1,
                      "name": "partySize",
                      "placeholder": "10",
                      "type": "number",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <input
                      id="partyWithBonusInput"
                      name="withBonus"
                      type="checkbox"
                    />,
                    <label
                      htmlFor="partyWithBonusInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        }
                      }
                    >
                      EXPLOSION MODE
                    </label>,
                  ],
                  "padding": "16px",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "id": "partyWithBonusInput",
                      "name": "withBonus",
                      "type": "checkbox",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "EXPLOSION MODE",
                      "htmlFor": "partyWithBonusInput",
                      "style": Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      },
                    },
                    "ref": null,
                    "rendered": "EXPLOSION MODE",
                    "type": "label",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "CREATE GAME",
                    "id": "submitButton",
                    "primary": true,
                    "style": Object {
                      "marginLeft": "20px",
                    },
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "CREATE GAME",
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div
            center={true}
            color="accent"
            gameFont={true}
            padding="20px"
            size="20px"
          >
            Create a new Game
          </styled.div>,
          <styled.div
            flex={true}
          >
            <styled.div />
            <form
              onSubmit={[Function]}
            >
              <styled.div>
                <styled.input
                  id="partyNameInput"
                  maxLength="20"
                  name="partyName"
                  placeholder="Room name..."
                  required={true}
                />
              </styled.div>
              <styled.div
                direction="column"
              >
                <label
                  htmlFor="partySizeInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingTop": "12px",
                    }
                  }
                >
                  Number of players
                </label>
                <styled.input
                  defaultValue={5}
                  id="partySizeInput"
                  max={10}
                  min={1}
                  name="partySize"
                  placeholder="10"
                  type="number"
                />
              </styled.div>
              <styled.div
                padding="16px"
              >
                <input
                  id="partyWithBonusInput"
                  name="withBonus"
                  type="checkbox"
                />
                <label
                  htmlFor="partyWithBonusInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingLeft": "12px",
                    }
                  }
                >
                  EXPLOSION MODE
                </label>
              </styled.div>
              <styled.div>
                <styled.button
                  id="submitButton"
                  primary={true}
                  style={
                    Object {
                      "marginLeft": "20px",
                    }
                  }
                  type="submit"
                >
                  CREATE GAME
                </styled.button>
              </styled.div>
            </form>
            <styled.div />
          </styled.div>,
        ],
        "padding": "20px",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "center": true,
            "children": "Create a new Game",
            "color": "accent",
            "gameFont": true,
            "padding": "20px",
            "size": "20px",
          },
          "ref": null,
          "rendered": "Create a new Game",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div />,
              <form
                onSubmit={[Function]}
              >
                <styled.div>
                  <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />
                </styled.div>
                <styled.div
                  direction="column"
                >
                  <label
                    htmlFor="partySizeInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      }
                    }
                  >
                    Number of players
                  </label>
                  <styled.input
                    defaultValue={5}
                    id="partySizeInput"
                    max={10}
                    min={1}
                    name="partySize"
                    placeholder="10"
                    type="number"
                  />
                </styled.div>
                <styled.div
                  padding="16px"
                >
                  <input
                    id="partyWithBonusInput"
                    name="withBonus"
                    type="checkbox"
                  />
                  <label
                    htmlFor="partyWithBonusInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      }
                    }
                  >
                    EXPLOSION MODE
                  </label>
                </styled.div>
                <styled.div>
                  <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>
                </styled.div>
              </form>,
              <styled.div />,
            ],
            "flex": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <styled.div>
                    <styled.input
                      id="partyNameInput"
                      maxLength="20"
                      name="partyName"
                      placeholder="Room name..."
                      required={true}
                    />
                  </styled.div>,
                  <styled.div
                    direction="column"
                  >
                    <label
                      htmlFor="partySizeInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        }
                      }
                    >
                      Number of players
                    </label>
                    <styled.input
                      defaultValue={5}
                      id="partySizeInput"
                      max={10}
                      min={1}
                      name="partySize"
                      placeholder="10"
                      type="number"
                    />
                  </styled.div>,
                  <styled.div
                    padding="16px"
                  >
                    <input
                      id="partyWithBonusInput"
                      name="withBonus"
                      type="checkbox"
                    />
                    <label
                      htmlFor="partyWithBonusInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        }
                      }
                    >
                      EXPLOSION MODE
                    </label>
                  </styled.div>,
                  <styled.div>
                    <styled.button
                      id="submitButton"
                      primary={true}
                      style={
                        Object {
                          "marginLeft": "20px",
                        }
                      }
                      type="submit"
                    >
                      CREATE GAME
                    </styled.button>
                  </styled.div>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.input
                      id="partyNameInput"
                      maxLength="20"
                      name="partyName"
                      placeholder="Room name..."
                      required={true}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "id": "partyNameInput",
                      "maxLength": "20",
                      "name": "partyName",
                      "placeholder": "Room name...",
                      "required": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <label
                        htmlFor="partySizeInput"
                        style={
                          Object {
                            "color": "#f4f5f3",
                            "paddingTop": "12px",
                          }
                        }
                      >
                        Number of players
                      </label>,
                      <styled.input
                        defaultValue={5}
                        id="partySizeInput"
                        max={10}
                        min={1}
                        name="partySize"
                        placeholder="10"
                        type="number"
                      />,
                    ],
                    "direction": "column",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Number of players",
                        "htmlFor": "partySizeInput",
                        "style": Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        },
                      },
                      "ref": null,
                      "rendered": "Number of players",
                      "type": "label",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultValue": 5,
                        "id": "partySizeInput",
                        "max": 10,
                        "min": 1,
                        "name": "partySize",
                        "placeholder": "10",
                        "type": "number",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <input
                        id="partyWithBonusInput"
                        name="withBonus"
                        type="checkbox"
                      />,
                      <label
                        htmlFor="partyWithBonusInput"
                        style={
                          Object {
                            "color": "#f4f5f3",
                            "paddingLeft": "12px",
                          }
                        }
                      >
                        EXPLOSION MODE
                      </label>,
                    ],
                    "padding": "16px",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "id": "partyWithBonusInput",
                        "name": "withBonus",
                        "type": "checkbox",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "EXPLOSION MODE",
                        "htmlFor": "partyWithBonusInput",
                        "style": Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        },
                      },
                      "ref": null,
                      "rendered": "EXPLOSION MODE",
                      "type": "label",
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.button
                      id="submitButton"
                      primary={true}
                      style={
                        Object {
                          "marginLeft": "20px",
                        }
                      }
                      type="submit"
                    >
                      CREATE GAME
                    </styled.button>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "CREATE GAME",
                      "id": "submitButton",
                      "primary": true,
                      "style": Object {
                        "marginLeft": "20px",
                      },
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "CREATE GAME",
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Forms PlayerForm PlayerForm component should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PlayerForm
    player={
      Object {
        "nickname": undefined,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div
          center={true}
          color="accent"
          gameFont={true}
          padding="20px"
          size="20px"
        >
          Enter your player nickname
        </styled.div>,
        <styled.div
          flex={true}
        >
          <styled.div />
          <styled.div>
            <styled.input
              id="nicknameInput"
              maxLength="10"
              name="nickname"
              onChange={[Function]}
              placeholder="Nickname..."
              value=""
            />
          </styled.div>
          <styled.div />
        </styled.div>,
      ],
      "padding": "20px",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "center": true,
          "children": "Enter your player nickname",
          "color": "accent",
          "gameFont": true,
          "padding": "20px",
          "size": "20px",
        },
        "ref": null,
        "rendered": "Enter your player nickname",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div />,
            <styled.div>
              <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />
            </styled.div>,
            <styled.div />,
          ],
          "flex": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "nicknameInput",
                "maxLength": "10",
                "name": "nickname",
                "onChange": [Function],
                "placeholder": "Nickname...",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div
            center={true}
            color="accent"
            gameFont={true}
            padding="20px"
            size="20px"
          >
            Enter your player nickname
          </styled.div>,
          <styled.div
            flex={true}
          >
            <styled.div />
            <styled.div>
              <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />
            </styled.div>
            <styled.div />
          </styled.div>,
        ],
        "padding": "20px",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "center": true,
            "children": "Enter your player nickname",
            "color": "accent",
            "gameFont": true,
            "padding": "20px",
            "size": "20px",
          },
          "ref": null,
          "rendered": "Enter your player nickname",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div />,
              <styled.div>
                <styled.input
                  id="nicknameInput"
                  maxLength="10"
                  name="nickname"
                  onChange={[Function]}
                  placeholder="Nickname..."
                  value=""
                />
              </styled.div>,
              <styled.div />,
            ],
            "flex": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <styled.input
                  id="nicknameInput"
                  maxLength="10"
                  name="nickname"
                  onChange={[Function]}
                  placeholder="Nickname..."
                  value=""
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "id": "nicknameInput",
                  "maxLength": "10",
                  "name": "nickname",
                  "onChange": [Function],
                  "placeholder": "Nickname...",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`PartyForm PartyForm should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PartyForm
    player={
      Object {
        "nickname": "toto",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div
          center={true}
          color="accent"
          gameFont={true}
          padding="20px"
          size="20px"
        >
          Create a new Game
        </styled.div>,
        <styled.div
          flex={true}
        >
          <styled.div />
          <form
            onSubmit={[Function]}
          >
            <styled.div>
              <styled.input
                id="partyNameInput"
                maxLength="20"
                name="partyName"
                placeholder="Room name..."
                required={true}
              />
            </styled.div>
            <styled.div
              direction="column"
            >
              <label
                htmlFor="partySizeInput"
                style={
                  Object {
                    "color": "#f4f5f3",
                    "paddingTop": "12px",
                  }
                }
              >
                Number of players
              </label>
              <styled.input
                defaultValue={5}
                id="partySizeInput"
                max={10}
                min={1}
                name="partySize"
                placeholder="10"
                type="number"
              />
            </styled.div>
            <styled.div
              padding="16px"
            >
              <input
                id="partyWithBonusInput"
                name="withBonus"
                type="checkbox"
              />
              <label
                htmlFor="partyWithBonusInput"
                style={
                  Object {
                    "color": "#f4f5f3",
                    "paddingLeft": "12px",
                  }
                }
              >
                EXPLOSION MODE
              </label>
            </styled.div>
            <styled.div>
              <styled.button
                id="submitButton"
                primary={true}
                style={
                  Object {
                    "marginLeft": "20px",
                  }
                }
                type="submit"
              >
                CREATE GAME
              </styled.button>
            </styled.div>
          </form>
          <styled.div />
        </styled.div>,
      ],
      "padding": "20px",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "center": true,
          "children": "Create a new Game",
          "color": "accent",
          "gameFont": true,
          "padding": "20px",
          "size": "20px",
        },
        "ref": null,
        "rendered": "Create a new Game",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div />,
            <form
              onSubmit={[Function]}
            >
              <styled.div>
                <styled.input
                  id="partyNameInput"
                  maxLength="20"
                  name="partyName"
                  placeholder="Room name..."
                  required={true}
                />
              </styled.div>
              <styled.div
                direction="column"
              >
                <label
                  htmlFor="partySizeInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingTop": "12px",
                    }
                  }
                >
                  Number of players
                </label>
                <styled.input
                  defaultValue={5}
                  id="partySizeInput"
                  max={10}
                  min={1}
                  name="partySize"
                  placeholder="10"
                  type="number"
                />
              </styled.div>
              <styled.div
                padding="16px"
              >
                <input
                  id="partyWithBonusInput"
                  name="withBonus"
                  type="checkbox"
                />
                <label
                  htmlFor="partyWithBonusInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingLeft": "12px",
                    }
                  }
                >
                  EXPLOSION MODE
                </label>
              </styled.div>
              <styled.div>
                <styled.button
                  id="submitButton"
                  primary={true}
                  style={
                    Object {
                      "marginLeft": "20px",
                    }
                  }
                  type="submit"
                >
                  CREATE GAME
                </styled.button>
              </styled.div>
            </form>,
            <styled.div />,
          ],
          "flex": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <styled.div>
                  <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />
                </styled.div>,
                <styled.div
                  direction="column"
                >
                  <label
                    htmlFor="partySizeInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      }
                    }
                  >
                    Number of players
                  </label>
                  <styled.input
                    defaultValue={5}
                    id="partySizeInput"
                    max={10}
                    min={1}
                    name="partySize"
                    placeholder="10"
                    type="number"
                  />
                </styled.div>,
                <styled.div
                  padding="16px"
                >
                  <input
                    id="partyWithBonusInput"
                    name="withBonus"
                    type="checkbox"
                  />
                  <label
                    htmlFor="partyWithBonusInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      }
                    }
                  >
                    EXPLOSION MODE
                  </label>
                </styled.div>,
                <styled.div>
                  <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>
                </styled.div>,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "id": "partyNameInput",
                    "maxLength": "20",
                    "name": "partyName",
                    "placeholder": "Room name...",
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <label
                      htmlFor="partySizeInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        }
                      }
                    >
                      Number of players
                    </label>,
                    <styled.input
                      defaultValue={5}
                      id="partySizeInput"
                      max={10}
                      min={1}
                      name="partySize"
                      placeholder="10"
                      type="number"
                    />,
                  ],
                  "direction": "column",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Number of players",
                      "htmlFor": "partySizeInput",
                      "style": Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      },
                    },
                    "ref": null,
                    "rendered": "Number of players",
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "defaultValue": 5,
                      "id": "partySizeInput",
                      "max": 10,
                      "min": 1,
                      "name": "partySize",
                      "placeholder": "10",
                      "type": "number",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <input
                      id="partyWithBonusInput"
                      name="withBonus"
                      type="checkbox"
                    />,
                    <label
                      htmlFor="partyWithBonusInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        }
                      }
                    >
                      EXPLOSION MODE
                    </label>,
                  ],
                  "padding": "16px",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "id": "partyWithBonusInput",
                      "name": "withBonus",
                      "type": "checkbox",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "EXPLOSION MODE",
                      "htmlFor": "partyWithBonusInput",
                      "style": Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      },
                    },
                    "ref": null,
                    "rendered": "EXPLOSION MODE",
                    "type": "label",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "CREATE GAME",
                    "id": "submitButton",
                    "primary": true,
                    "style": Object {
                      "marginLeft": "20px",
                    },
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "CREATE GAME",
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div
            center={true}
            color="accent"
            gameFont={true}
            padding="20px"
            size="20px"
          >
            Create a new Game
          </styled.div>,
          <styled.div
            flex={true}
          >
            <styled.div />
            <form
              onSubmit={[Function]}
            >
              <styled.div>
                <styled.input
                  id="partyNameInput"
                  maxLength="20"
                  name="partyName"
                  placeholder="Room name..."
                  required={true}
                />
              </styled.div>
              <styled.div
                direction="column"
              >
                <label
                  htmlFor="partySizeInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingTop": "12px",
                    }
                  }
                >
                  Number of players
                </label>
                <styled.input
                  defaultValue={5}
                  id="partySizeInput"
                  max={10}
                  min={1}
                  name="partySize"
                  placeholder="10"
                  type="number"
                />
              </styled.div>
              <styled.div
                padding="16px"
              >
                <input
                  id="partyWithBonusInput"
                  name="withBonus"
                  type="checkbox"
                />
                <label
                  htmlFor="partyWithBonusInput"
                  style={
                    Object {
                      "color": "#f4f5f3",
                      "paddingLeft": "12px",
                    }
                  }
                >
                  EXPLOSION MODE
                </label>
              </styled.div>
              <styled.div>
                <styled.button
                  id="submitButton"
                  primary={true}
                  style={
                    Object {
                      "marginLeft": "20px",
                    }
                  }
                  type="submit"
                >
                  CREATE GAME
                </styled.button>
              </styled.div>
            </form>
            <styled.div />
          </styled.div>,
        ],
        "padding": "20px",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "center": true,
            "children": "Create a new Game",
            "color": "accent",
            "gameFont": true,
            "padding": "20px",
            "size": "20px",
          },
          "ref": null,
          "rendered": "Create a new Game",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div />,
              <form
                onSubmit={[Function]}
              >
                <styled.div>
                  <styled.input
                    id="partyNameInput"
                    maxLength="20"
                    name="partyName"
                    placeholder="Room name..."
                    required={true}
                  />
                </styled.div>
                <styled.div
                  direction="column"
                >
                  <label
                    htmlFor="partySizeInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingTop": "12px",
                      }
                    }
                  >
                    Number of players
                  </label>
                  <styled.input
                    defaultValue={5}
                    id="partySizeInput"
                    max={10}
                    min={1}
                    name="partySize"
                    placeholder="10"
                    type="number"
                  />
                </styled.div>
                <styled.div
                  padding="16px"
                >
                  <input
                    id="partyWithBonusInput"
                    name="withBonus"
                    type="checkbox"
                  />
                  <label
                    htmlFor="partyWithBonusInput"
                    style={
                      Object {
                        "color": "#f4f5f3",
                        "paddingLeft": "12px",
                      }
                    }
                  >
                    EXPLOSION MODE
                  </label>
                </styled.div>
                <styled.div>
                  <styled.button
                    id="submitButton"
                    primary={true}
                    style={
                      Object {
                        "marginLeft": "20px",
                      }
                    }
                    type="submit"
                  >
                    CREATE GAME
                  </styled.button>
                </styled.div>
              </form>,
              <styled.div />,
            ],
            "flex": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <styled.div>
                    <styled.input
                      id="partyNameInput"
                      maxLength="20"
                      name="partyName"
                      placeholder="Room name..."
                      required={true}
                    />
                  </styled.div>,
                  <styled.div
                    direction="column"
                  >
                    <label
                      htmlFor="partySizeInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        }
                      }
                    >
                      Number of players
                    </label>
                    <styled.input
                      defaultValue={5}
                      id="partySizeInput"
                      max={10}
                      min={1}
                      name="partySize"
                      placeholder="10"
                      type="number"
                    />
                  </styled.div>,
                  <styled.div
                    padding="16px"
                  >
                    <input
                      id="partyWithBonusInput"
                      name="withBonus"
                      type="checkbox"
                    />
                    <label
                      htmlFor="partyWithBonusInput"
                      style={
                        Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        }
                      }
                    >
                      EXPLOSION MODE
                    </label>
                  </styled.div>,
                  <styled.div>
                    <styled.button
                      id="submitButton"
                      primary={true}
                      style={
                        Object {
                          "marginLeft": "20px",
                        }
                      }
                      type="submit"
                    >
                      CREATE GAME
                    </styled.button>
                  </styled.div>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.input
                      id="partyNameInput"
                      maxLength="20"
                      name="partyName"
                      placeholder="Room name..."
                      required={true}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "id": "partyNameInput",
                      "maxLength": "20",
                      "name": "partyName",
                      "placeholder": "Room name...",
                      "required": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <label
                        htmlFor="partySizeInput"
                        style={
                          Object {
                            "color": "#f4f5f3",
                            "paddingTop": "12px",
                          }
                        }
                      >
                        Number of players
                      </label>,
                      <styled.input
                        defaultValue={5}
                        id="partySizeInput"
                        max={10}
                        min={1}
                        name="partySize"
                        placeholder="10"
                        type="number"
                      />,
                    ],
                    "direction": "column",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Number of players",
                        "htmlFor": "partySizeInput",
                        "style": Object {
                          "color": "#f4f5f3",
                          "paddingTop": "12px",
                        },
                      },
                      "ref": null,
                      "rendered": "Number of players",
                      "type": "label",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "defaultValue": 5,
                        "id": "partySizeInput",
                        "max": 10,
                        "min": 1,
                        "name": "partySize",
                        "placeholder": "10",
                        "type": "number",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <input
                        id="partyWithBonusInput"
                        name="withBonus"
                        type="checkbox"
                      />,
                      <label
                        htmlFor="partyWithBonusInput"
                        style={
                          Object {
                            "color": "#f4f5f3",
                            "paddingLeft": "12px",
                          }
                        }
                      >
                        EXPLOSION MODE
                      </label>,
                    ],
                    "padding": "16px",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "id": "partyWithBonusInput",
                        "name": "withBonus",
                        "type": "checkbox",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "EXPLOSION MODE",
                        "htmlFor": "partyWithBonusInput",
                        "style": Object {
                          "color": "#f4f5f3",
                          "paddingLeft": "12px",
                        },
                      },
                      "ref": null,
                      "rendered": "EXPLOSION MODE",
                      "type": "label",
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <styled.button
                      id="submitButton"
                      primary={true}
                      style={
                        Object {
                          "marginLeft": "20px",
                        }
                      }
                      type="submit"
                    >
                      CREATE GAME
                    </styled.button>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "CREATE GAME",
                      "id": "submitButton",
                      "primary": true,
                      "style": Object {
                        "marginLeft": "20px",
                      },
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "CREATE GAME",
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`PlayerForm PlayerForm component should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PlayerForm
    player={
      Object {
        "nickname": undefined,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div
          center={true}
          color="accent"
          gameFont={true}
          padding="20px"
          size="20px"
        >
          Enter your player nickname
        </styled.div>,
        <styled.div
          flex={true}
        >
          <styled.div />
          <styled.div>
            <styled.input
              id="nicknameInput"
              maxLength="10"
              name="nickname"
              onChange={[Function]}
              placeholder="Nickname..."
              value=""
            />
          </styled.div>
          <styled.div />
        </styled.div>,
      ],
      "padding": "20px",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "center": true,
          "children": "Enter your player nickname",
          "color": "accent",
          "gameFont": true,
          "padding": "20px",
          "size": "20px",
        },
        "ref": null,
        "rendered": "Enter your player nickname",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div />,
            <styled.div>
              <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />
            </styled.div>,
            <styled.div />,
          ],
          "flex": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "nicknameInput",
                "maxLength": "10",
                "name": "nickname",
                "onChange": [Function],
                "placeholder": "Nickname...",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div
            center={true}
            color="accent"
            gameFont={true}
            padding="20px"
            size="20px"
          >
            Enter your player nickname
          </styled.div>,
          <styled.div
            flex={true}
          >
            <styled.div />
            <styled.div>
              <styled.input
                id="nicknameInput"
                maxLength="10"
                name="nickname"
                onChange={[Function]}
                placeholder="Nickname..."
                value=""
              />
            </styled.div>
            <styled.div />
          </styled.div>,
        ],
        "padding": "20px",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "center": true,
            "children": "Enter your player nickname",
            "color": "accent",
            "gameFont": true,
            "padding": "20px",
            "size": "20px",
          },
          "ref": null,
          "rendered": "Enter your player nickname",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div />,
              <styled.div>
                <styled.input
                  id="nicknameInput"
                  maxLength="10"
                  name="nickname"
                  onChange={[Function]}
                  placeholder="Nickname..."
                  value=""
                />
              </styled.div>,
              <styled.div />,
            ],
            "flex": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <styled.input
                  id="nicknameInput"
                  maxLength="10"
                  name="nickname"
                  onChange={[Function]}
                  placeholder="Nickname..."
                  value=""
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "id": "nicknameInput",
                  "maxLength": "10",
                  "name": "nickname",
                  "onChange": [Function],
                  "placeholder": "Nickname...",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
